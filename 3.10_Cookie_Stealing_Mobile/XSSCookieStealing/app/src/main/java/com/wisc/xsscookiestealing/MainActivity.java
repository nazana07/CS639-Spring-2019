package com.wisc.xsscookiestealing;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.webkit.CookieManager;
import android.webkit.JsResult;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import java.io.IOException;
import java.util.*;


public class MainActivity extends AppCompatActivity {
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main); // set the layout file
        String domain = "http://10.0.2.2:8080";  // store the URL of the website generated by the local server

        //create a CookieManager object to od operations on cookies
        final CookieManager cookieManager = CookieManager.getInstance();
        cookieManager.setAcceptCookie(true);
        cookieManager.removeAllCookies(null);
        cookieManager.setCookie(domain, "session = 1234;"); // set the cookies of the domain
        CookieManager.getInstance().setAcceptCookie(true); // enable cookies

        final List<String> list = new ArrayList<>(); // array list to hold the white list
        try (Scanner scanner = new Scanner(getAssets().open("whitelist")) ) { // automatically close scanner
            while (scanner.hasNext()) // read the file into an array list
                list.add(scanner.next());
        } catch (IOException e) { // cannot open the file, print an error message
            System.err.println("Cannot open the whitelist file. Assume the white list is empty");
        }

        final WebView web = findViewById(R.id.web1); // create a WebView object
        web.getSettings().setJavaScriptEnabled(true); // enable javascript code running on webview
        web.loadUrl(domain);  // present the desired URL

        web.setWebChromeClient(new WebChromeClient() {
            @Override
            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
                return super.onJsAlert(view, url, message, result);
            }
        });

        web.setWebViewClient(new WebViewClient() {
            @Override // this overridden method will throw an error if the web request does not match the whitelist
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                if (list.contains(request.getUrl().getHost())) // if URL is in the whitelist
                    return false;
                web.loadUrl("javascript: alert('invalid request')"); // if URL is not in the whitelist
                return true;
            }
        });
    }
}

